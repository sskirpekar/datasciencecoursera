x<- c(4,'a',TRUE)
class(x)
x<- c(1,3,5)
y<- c(3,2,10)
cbind(x,y)
x<- 1:4
y<- 2
x+y
class(x)
class(x+y)
x<- c(17, 14, 4, 5, 13, 12, 10)
x
x[x>10]<-4
x
x<-4L
class(x)
x <- 4L
class(x)
x<- c(1,3,5)
y<- c(3,2,10)
rbind(x,y)
x<- list(2,"a","b",TRUE)
x[[1]]
class([[1]])
class(x)
class(x[[1]])
x[[1]]
x<- 1:4
y<- 2:3
x+y
class(x+y)
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5 + 7
x <- 5 + 7
x
y < x - 3
y <- x -3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555)
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
bye
bye()
exit()
bye
library(swirl)
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
list.files
?list.files
list.files()
args(list.files)
"old.dir"
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd()
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R" "mytest2.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R" , "mytest3.R")
file.path()
file.path("mytest3.R")
file.path
file.path("folder1", "folder2")
file.path("folder1", "folder2" "TRUE")
?dir.create
dir.create()
dir.create("testdir2")
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir", recursive = TRUE  )
unlink("testdir", recursive = TRUE
;
unlink("testdir", recursive = TRUE , force = false)
unlink("testdir", recursive = TRUE , force = TRUE )
info()
unlink("testdir" , recursive = TRUE , force = TRUE )
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
bye
bye()
exit()
add2 <- function(x,y){
x+y
}
add2(3,5)
sys.time()
t<-Sys.time()
t
library(swirl)
swirl()
1:20
pi:10
15:1?
15:1
:
':'
":"
?':'
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
my_seq.length()
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c
(0, 1, 2))
rep(c
(0, 1, 2), time=10)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- [0.5, 55, -10, 6]
num_vect[] <- [0.5, 55, -10, 6]
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num >= 6
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
add(my_char, "Avinash")
c(my_char, "Avinash")
my_name <-c(my_char, "Avinash")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep =" ")
paste(c("X", "Y", "Z" ), sep = "")
paste(1:3, c("X", "Y", "Z" ), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- my_data.na()
my_na <- .na(my_data)
my_na <- my_data(.na())
my_na <- my_data().na()
my_na <- my_data().na
my_na <- is.na(my_data)
my_na
my_data == NA
?sum()
sum(my_na , na.rm = TRUE)
sum(my_na)
my_data
my_data / 0
info()
0/0
Inf - Inf
x
x[1:10]
x[is.na()]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
c(x(3:7,2))
x(c(3:7,2))
x[3:2:7]
c(3,5,7)
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
vect[name()]
vect[names()]
vect[names]
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- [1:20]
my_vector <- c(1:20)
my_vector <- 1:20
myvector[1:20]
my_vector <- c(1:20)
my_vector <- (1:20)
my_vector <- [1:20]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20)
my_matrix2 <- matrix(1:20, 4 ,5)
identical(my_matrix, my_matrix2)
patients <- ["Bill", "Gina", "Kelly", "Sean"]
patients <- "Bill", "Gina", "Kelly", "Sean"
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cname <- c ("patient", "age", "weight", "bp", "rating", "test")
cname <- c("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data, cnames)
?colnames
colnames(my_data) <- cname
colnames(my_data) <- cnames
my_data
==
TRUE == TRUE
FALSE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5
5 != 7
! 5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins','twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints >0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x$1},c(8, 4, 0))
evaluate(function(x){head(x)},c(8, 4, 0))
evaluate(function(x){x[1]},c(8, 4, 0))
evaluate(function(x){x[3]},c(8, 4, 0))
evaluate(function(x){ length(x) == 3},c(8, 4, 0))
evaluate(function(x){x[length(x)]},c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Good", "morning")
submit()
submit()
mad_libs("place = pune","adjective = Science", "noun = canteen" )
submit()
'Hello' %p% 'student!'
submit()
submit()
'Hello' %p% 'student!'
submit()
"Good" %p% "job!"
'Hello' %p% 'student!'
submit()
'I %p% love %p% R'
'I' %p% 'love' %p% 'R'
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
d1$wday
d1$weekday
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time(){} - t1
{Sys.time()} - t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1:10
x
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
}
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
getwd()
setwd('E:\DataScience\RAssignment\week2')
setwd("E:\DataScience\RAssignment\week2")
setwd("E:\\DataScience\\RAssignment\\week2")
getwd
getwd()
source('E:/DataScience/RAssignment/week2/pollutantmean.R')
list.files()
source('E:/DataScience/RAssignment/week2/pollutantmean.R')
pollutantmean("specdata", "sulfate", 1:10)
